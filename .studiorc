echo
echo "--> Installing useful packages for development..."
hab pkg install core/composer emergence/php5
hab pkg binlink core/composer composer
hab pkg binlink emergence/php5 php

export COMPOSER_ALLOW_SUPERUSER=1

composer g require \
    symfony/console:^3 \
    symfony/var-dumper:^3 \
    nikic/php-parser:^3 \
    psy/psysh:@stable

sed -e "s#\#\!/usr/bin/env php#\#\!$(hab pkg path emergence/php5)/bin/php#" --in-place "/root/.composer/vendor/psy/psysh/bin/psysh"

mkdir -p /root/.config/psysh
cat > /root/.config/psysh/config.php <<- END_OF_SCRIPT
<?php

date_default_timezone_set('America/New_York');

return [
    'commands' => [
        new \Psy\Command\ParseCommand,
    ],

    'defaultIncludes' => [
        '/hab/svc/gatekeeper-app/config/initialize.php',
    ]
];

END_OF_SCRIPT


echo
echo "--> Configuring services for local development..."

mkdir -p /hab/user/gatekeeper-app/config
echo -e "[core]\nroot = \"/src/core\"\n\n[site]\nroot = \"/src/site\"" > /hab/user/gatekeeper-app/config/user.toml

mkdir -p /hab/user/gatekeeper-http/config
echo -e "[http.listen]\nport = 7080" > /hab/user/gatekeeper-http/config/user.toml

mkdir -p /hab/user/mysql/config
echo -e "app_username = \"gatekeeper\"\napp_password = \"gatekeeper\"\nbind = \"0.0.0.0\"\n" > /hab/user/mysql/config/user.toml


echo
echo "--> Setting up development commands..."

echo "    * Use 'build-app' to build just the app package"
build-app() {
    pushd /src > /dev/null

    build services/app

    popd > /dev/null
}

echo "    * Use 'build-http' to build just the http package"
build-http() {
    pushd /src > /dev/null

    build services/http

    popd > /dev/null
}

echo "    * Use 'build-composite' to build just the composite package"
build-composite() {
    pushd /src > /dev/null

    build

    popd > /dev/null
}

echo "    * Use 'build-all' to build all packages"
build-all() {
    pushd /src > /dev/null

    build services/app
    build services/http
    build

    popd > /dev/null
}


echo
echo "    * Use 'start-mysql' to start just mysql service"
start-mysql() {
    hab start core/mysql
}

echo "    * Use 'start-app' to start just app service bound to mysql"
start-app() {
    hab start jarvus/gatekeeper-app --bind database:mysql.default --config-from /src/services/app/
}

echo "    * Use 'start-app-remote' to start just app service bound to mysql-remote"
start-app-remote() {
    hab start jarvus/gatekeeper-app --bind database:mysql-remote.default --config-from /src/services/app/
}

echo "    * Use 'start-http' to start just http service"
start-http() {
    hab start jarvus/gatekeeper-http --bind app:gatekeeper-app.default
}

echo "    * Use 'start-composite' to start all services via composite"
start-composite() {
    hab start jarvus/gatekeeper
}

echo "    * Use 'start-all' to start all services individually"
start-all() {
    start-mysql
    start-app
    start-http
}


echo
echo "    * Use 'stop-mysql' to stop just mysql service"
stop-mysql() {
    hab stop core/mysql
}

echo "    * Use 'stop-app' to stop just app service"
stop-app() {
    hab stop jarvus/gatekeeper-app
}

echo "    * Use 'stop-http' to stop just http service"
stop-http() {
    hab stop jarvus/gatekeeper-http
}

echo "    * Use 'stop-composite' to stop all services via composite"
stop-composite() {
    hab stop jarvus/gatekeeper
}

echo "    * Use 'stop-all' to stop everything"
stop-all() {
    stop-composite
    stop-http
    stop-app
    stop-mysql
}


echo
echo "    * Use 'shell-mysql' to open a mysql shell for the studio mysql service"
shell-mysql() {
    hab pkg exec core/mysql mysql -u root -h 127.0.0.1
}

echo "    * Use 'shell-app' to open a php shell for the studio app service"
shell-app() {
    /root/.composer/vendor/psy/psysh/bin/psysh
}


# overall instructions
echo
echo "    For a complete studio debug environment:"
echo "      build-all && start-all"


# final blank line
echo
