echo
echo "--> Installing useful hab packages for development..."
hab pkg install core/composer emergence/php5 core/node core/git


echo
echo "--> Binlinking useful commands for development..."
hab pkg binlink core/node
hab pkg binlink core/git
hab pkg binlink core/composer composer
hab pkg binlink emergence/php5 php


echo
echo "--> Building local copies of development tools"
pushd /src/ > /dev/null
build hologit
HAB_ORIGIN=emergence build habitat-plans/hololens-sass
#HAB_ORIGIN=emergence build habitat-plans/hololens-dwoo-templates
#HAB_ORIGIN=emergence build habitat-plans/hololens-extjs-pages
#HAB_ORIGIN=emergence build habitat-plans/hololens-php-classes
popd > /dev/null


echo
echo "--> Preparing /src/core/ for development"
export COMPOSER_ALLOW_SUPERUSER=1

composer g require \
    symfony/console:^3 \
    symfony/var-dumper:^3 \
    nikic/php-parser:^3 \
    psy/psysh:@stable

pushd /src/core/ > /dev/null
composer install
popd > /dev/null


echo
echo "--> Preparing /src/hologit/ for development"
pushd /src/hologit/ > /dev/null
npm install
popd > /dev/null

cat > /bin/git-holo <<- END_OF_SCRIPT
#!/bin/sh

exec node /src/hologit/bin/cli.js \$@

END_OF_SCRIPT

chmod +x /bin/git-holo


echo
echo "--> Configuring PsySH for application shell..."
sed -e "s#\#\!/usr/bin/env php#\#\!$(hab pkg path emergence/php5)/bin/php#" --in-place "/root/.composer/vendor/psy/psysh/bin/psysh"

mkdir -p /root/.config/psysh
cat > /root/.config/psysh/config.php <<- END_OF_SCRIPT
<?php

date_default_timezone_set('America/New_York');

return [
    'commands' => [
        new \Psy\Command\ParseCommand,
    ],

    'defaultIncludes' => [
        '/hab/svc/gatekeeper-app/config/initialize.php',
    ]
];

END_OF_SCRIPT


echo
echo "--> Configuring services for local development..."

init-user-config() {
    config_pkg_name="$1"
    config_default="$2"
    [ -z "$config_pkg_name" -o -z "$config_default" ] && { echo >&2 'Usage: init-user-config pkg_name "[default]\nconfig = value"'; return 1; }

    config_toml_path="/hab/user/${config_pkg_name}/config/user.toml"

    if [ ! -f "$config_toml_path" ]; then
        echo "    Initializing: $config_toml_path"
        mkdir -p "/hab/user/${config_pkg_name}/config"
        echo -e "$config_default" > "$config_toml_path"
    fi
}

init-user-config gatekeeper-app '
    [core]
    root = "/src/core"

    [site.holo]
    repo = "/src/site/.git"
'

init-user-config nginx '
    [http.listen]
    port = 7080
'

init-user-config mysql '
    app_username = "gatekeeper"
    app_password = "gatekeeper"
    bind = "0.0.0.0"
'

init-user-config mysql-remote '
    app_username = "gatekeeper"
    app_password = "gatekeeper"
    host = "127.0.0.1"
    port = 3306
'


echo
echo "--> Setting up development commands..."

echo "    * Use 'update-site' to update the running site from "
update-site() {
    pushd /src/site > /dev/null

    git holo project site | /hab/svc/gatekeeper-app/config/fpm-exec --stdin PUT load.php

    popd > /dev/null
}

echo "    * Use 'build-app' to build just the app package"
build-app() {
    pushd /src > /dev/null

    build habitat-plans/app

    popd > /dev/null
}

echo "    * Use 'build-composite' to build just the composite package"
build-composite() {
    pushd /src > /dev/null

    build habitat-plans/composite

    popd > /dev/null
}

echo "    * Use 'build-all' to build all packages"
build-all() {
    build-app && build-composite
}


echo

echo "    * Use 'start-mysql-local' to start local mysql service"
start-mysql-local() {
    stop-mysql
    hab svc load core/mysql \
        --strategy at-once
}

echo "    * Use 'start-mysql-remote' to start remote mysql service"
start-mysql-remote() {
    stop-mysql
    hab svc load jarvus/mysql-remote \
        --strategy at-once
}

echo "    * Use 'start-app-local' to start app service bound to local mysql"
start-app-local() {
    hab svc load "${HAB_ORIGIN}/gatekeeper-app" \
        --bind=database:mysql.default \
        --strategy at-once
}

echo "    * Use 'start-app-remote' to start app service bound to remote mysql"
start-app-remote() {
    hab svc load "${HAB_ORIGIN}/gatekeeper-app" \
        --bind=database:mysql-remote.default \
        --strategy at-once
}

echo "    * Use 'start-http' to start http service"
start-http() {
    hab svc load emergence/nginx \
        --bind=app:gatekeeper-app.default \
        --strategy at-once
}

echo "    * Use 'start-composite' to start app+http via composite"
start-composite() {
    hab svc load "${HAB_ORIGIN}/gatekeeper" \
        --strategy at-once
}

echo "    * Use 'start-all-local' to start all services individually with local mysql"
start-all-local() {
    start-mysql-local && start-app-local && start-http
}

echo "    * Use 'start-all-remote' to start all services individually with remote mysql"
start-all-remote() {
    start-mysql-remote && start-app-remote && start-http
}


echo
echo "    * Use 'stop-mysql' to stop just mysql service"
stop-mysql() {
    hab svc unload core/mysql
    hab svc unload jarvus/mysql-remote
}

echo "    * Use 'stop-app' to stop just app service"
stop-app() {
    hab svc unload "${HAB_ORIGIN}/gatekeeper-app"
}

echo "    * Use 'stop-http' to stop just http service"
stop-http() {
    hab svc unload emergence/nginx
}

echo "    * Use 'stop-composite' to stop all services via composite"
stop-composite() {
    hab stop "${HAB_ORIGIN}/gatekeeper"
}

echo "    * Use 'stop-all' to stop everything"
stop-all() {
    stop-composite
    stop-http
    stop-app
    stop-mysql
}


echo

echo "    * Use 'shell-mysql-local' to open a mysql shell for the local mysql service"
shell-mysql-local() {
    hab pkg exec core/mysql mysql -u root -h 127.0.0.1
}

echo "    * Use 'shell-mysql-remote' to open a mysql shell for the remote mysql service"
shell-mysql-remote() {
    hab pkg exec core/mysql mysql --defaults-extra-file=/hab/svc/mysql-remote/config/client.cnf
}

echo "    * Use 'shell-app' to open a php shell for the studio app service"
shell-app() {
    /root/.composer/vendor/psy/psysh/bin/psysh
}


# overall instructions
echo
echo "    For a complete studio debug environment:"
echo "      build-app && start-all-local"


# final blank line
echo
